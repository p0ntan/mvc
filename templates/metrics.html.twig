{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block header %}Metrics{% endblock %}

{% block main %}
    <h3>Introduktion</h3>
    <p><strong>Codestyle</strong> - handlar om att koden följer en viss kodstil. Om man t ex är flera som jobbar med ett projekt, ger det en mer lättläst och enhetlig kod för alla om man följer samma kodstil. För detta kan man använda verktyg som csfixer som automatiskt skriver om koden för att uppfylla en standard.</p>
    <p><strong>Coverage</strong> - kodtäckning, hur stor del av koden som täcks utav enhetstest. Mäts i procent där man eftersträvar ett högt mätvärde som innebär hur stor del av koden som har testats, vilket i sig kan innebära mindre risk för buggar. Min egen kod har vid en första mätning en total kodtäckning på 54 %, där vissa delar tillhör mitt kortspel har en 100% kodtäckning.</p>
    <p><strong>Complexity</strong> - kodkomplexitet, hur många vägval det finns i koden i form av t ex if- eller switch-satser. Man önskar en lågt mätvärde på kodens komplexitet, där man kan ha ett riktvärde på under 10 som bl a kan ge en mer lättläst och lättunderhållen kod. Min egen kod har ett snittvärde på 5,7 (cyklomatisk komplexitet) när det gäller klasserna i min kod. </p>
    <p><strong>Cohesion</strong> - hur stort ansvarsområde/funktionalitet t ex en klass har, där målet är att en klass endast har ett ansvarsområde. Man vill här sträva efter ett högt mätvärde som indikerar att koden har sin specifika uppgift/ansvarsområde.</p>
    <p><strong>Coupling</strong> - ett mått på hur beroende klasser är av varandra. Vid mätning önskar man ett lågt mätvärde då detta indikerar att olika klasser inte är allt för beroende av varandra. En kod med mycket beroenden kan vara svårare att underhålla. I min egen kod så får många av mina controllers högre mätvärden för "efferent coupling", som innebär att mina controllers är beroende av flera klasser. </p>
    <p><strong>CRAP</strong> - är ett kombinerat mätvärde av bl a kodtäckning (coverage) och komplexitet (complexity). Ett lågt mätvärde är önskvärt när det kommer till CRAP. Ett lågt mätvärde är önskat, där ett högt värde bl a kan innebära kod som är svårare att underhålla eller utveckla.</p>

    <h3>PhpMetrics</h3>
    <p>Koden har 7 violations, där 6 är varningar och 1 är ett error. Det error som ges är på min ApiController är ett "Blob/God object" error, 4 av varningarna är av typen "probably bugged" och de sista 2 varningarna är båda "stable abstractions principle".</p>
    <p><strong>Codestyle</strong> - finns inte så mycket att säga om kodstilen. Med hjälp av verktyget csfixer så håller koden önskad kodstandard.</p>
    <p><strong>Coverage</strong> - koden består av 1537 rader, där den exakta kodtäckningen framgår inte av PhpMetrics vad jag kan hitta. Däremot visar den att jag har 11 test suits och 202 assertions. 12 klasser är inte testade alls, där de allra flesta är mina controllers samt klasserna för mitt bibliotek. Klasserna har i snitt 0.16 buggar, där majoriteten är under snittet men där flera controllers och mer komplexa klasser hamnar över snittet där högsta uppmätta värde är 0.57.</p>
    <p><strong>Complexity</strong> - de allra flesta av kodens klasser har en cykolmatisk komplexitet på 7 eller lägre med ett snittvärde på 5.7. Tre klasser som alla tillhör blackjack-spelet sticker däremot ut och drar upp snittet då de har en högre komplexitet, där den med högst komplexitet är min RulesBlackjack-klass (29). Kollar man däremot på metoder och dess komplexitet så har alla mina metoder i alla klasser en komplexitet under 10, där det högsta uppmätta mätvärdet är 8.</p>
    <p><strong>Cohesion</strong> - koden har ett LCOM (lack of cohesion of methods) snittvärde på 1.15, där man eftersträvar ett lågt mätvärde om man vill följa SOLID-principen. De allra flesta av mina klasser har 1 eller 0 som mätvärde, tre av klasserna har ett mätvärde på 2 och den som högst värde på 5 är min ApiController-klass.</p>
    <p><strong>Coupling</strong> - de klasser i koden som har ett högre Ce-värde, alltså är bereonde av andra klasser, är främst några av mina controllers som har mätvärden som högst ett uppmätt Ce-värde på 8. Klasser med högst Ca-värde ("afferent coupling"), som mäter beroendet andra klasser har av klassen, är bl a min DeckOfCards och Cards klass som båda har ett Ca-värde på 5.</p>
    <p><strong>CRAP</strong> - jag hittar ingen del som direkt ger ett CRAP-värde hos PhpMetrics, men att "mainability index" kan ge ett hum om vilka klasser som kan innehålla metoder som har ett högt CRAP-score. 4 av mina klasser får där en röd märkning, 6 klasser får en gul märkning och 10 klasser har en grön märkning.</p>
    <p>Även om man inte via PhpMetrics får fram den exakta kodtäckningen, så tolkar jag de mätvärden som uppmätts att det skulle behövas mer testning av koden. Då flera violations är "probably bugged" tillsammans med att många klasser är helt otestade, så skulle mer tester kunna både förbättra kodtäckningen samt bli av med varningar.</p>
    <p>Det "Blob/God-object" error som min ApiController vill troligen uppstå på grund av att de api:er som finns på sidan har olika syften. Att dessa då samlas och presenteras via endast en controller gör det rimligt att den då får ett för brett/stort ansvarsområde. Klassen kan skrivas om, t ex antingen genom att dela upp den i mindre controllers.</p>
    <p>Kodens komplexitet och förmåga att underhålla/utveckla kan förbättras. Även om snittvärden kan hamna under riktvärdet 10 så är det några få klasser som drar upp snittet. Dessa klasser är även antingen markerade med gult eller rött i förhållande till "maintainability index", vilket jag ser som rimligt med tanke på deras utstickande komplexitet. Förbättring av dessa tre klasser skulle troligen kunna förbättra koden som helhet, speciellt i avseende på underhåll och utveckling.</p>
    <img src="{{ asset('image/metrics-circles.png')}}" alt="Diagram som visar olika klassers komplexitet och underhållsindex.">

    <h3>Scrutinizer</h3>
    <img src="https://scrutinizer-ci.com/g/p0ntan/mvc/badges/quality-score.png?b=main" alt="Bild på scrutinizer badge, kvalitéetsbetyg." class="h-auto">
    <img src="https://scrutinizer-ci.com/g/p0ntan/mvc/badges/coverage.png?b=main" alt="Bild på scrutinizer badge, kodtäckning.">
    <img src="https://scrutinizer-ci.com/g/p0ntan/mvc/badges/build.png?b=main" alt="Bild på scrutinizer badge, build.">
    <img src="https://scrutinizer-ci.com/g/p0ntan/mvc/badges/code-intelligence.svg?b=main" alt="Bild på scrutinizer badge, code intelligence.">
    <p>Scrutinizer ger ett helhetsbetygt på 9.95, där alla badges är gröna förutom coverage som är gul. Koden har 7 issues. Alla klasser får betyget A, vilket även gäller alla metoder förutom två stycker som har fått betyget B. Rapporten kan ses i sin helhet <a href="https://scrutinizer-ci.com/g/p0ntan/mvc/">här</a>.</p>
    <p><strong>Codestyle</strong> - som ovan, inte mycket att säga om kodstilen då csfixer används.</p>
    <p><strong>Coverage</strong> - den totala kodtäckningen är 54 %, där alla klasser som har skapats för Blackjack-spelet har däremot 100 % kodtäckning.</p>
    <p><strong>Complexity</strong> - mätningarna ger högre värden på komplexitet jämfört med PhpMetrics. PhpMetrics mäter komplexiteten på fler sätt, där scrutinizers mätvärden delvis stämmer överens med metrics WMC-värden. Här hamnar totalt tolv klasser över riktvärdet 10 med scrutinizers mätvärden, men endast sex om man tittar på PhpMetrics WMC-värde. Det högst uppmätta värdet har en komplixtet på 39. Kollar man istället på komplexitet på metod-nivå är mätvärdena liknande de från PhpMetrics, där det högsta uppmätta värdet på en enskild metod är 8. En stor marjoritet av alla metoder har en komplexitet på 3 eller lägre.</p> 
    <p><strong>Cohesion</strong> - i mina scrutinizer mätningar dyker inte columnen cohesion upp. Så det finns här ingen data att rapportera om.</p>
    <p><strong>Coupling</strong> - likt cohesion dyker inte columnen coupling upp. Så det finns här ingen data att rapportera om.</p>
    <p><strong>CRAP</strong> - de uppmätta CRAP-värdena på metoderna ligger alla utom en under 10. Majoriteten av de har ett CRAP-score på 3 eller lägre. Metoden som sticker ut och har ett värde på 12 tillhör min api-controller, och mer specifikt routen för att dela ut kort till flera spelare.</p>

    <p>Scrutinizers rapport anser jag vara överlag bra, även om det finns mer att önska på enskilda mätvärden så är det trots allt ett högt betyg på all kod som helhet. En första del som man kan förbättra är kodtäckningen, som förutom att kunna ändra andel kod som täcks av tester även kan förbättra CRAP-värdet där det kan förbättras.</p>
    <p>Det finns en del issues som kan ses över och jobbas med, men vissa av de problemen är på kod som kommer från andra vertyg och inte skrivna av mig. De som tillhör min egna kod är mer av karaktären "Bug", "Best practice" och "Unused code" och de ändringar som behöver göras är inte speciellt omfattande.</p>
    <p>Alla metoder och klasser får som regel A i betyg, men det är två metoder som endast når upp i betyget B. I dessa är det framförallt komplexiteten i metoden som skulle kunna förbättra betyget, </p>
    
    <h3>Förbättringar</h3>
    <p>Den första förbättringen jag tänker göra med koden är att fixa de issues som jag fått i scrutinizer. Där avser jag lösa de issues som i första han tillhör den koden jag själv skrivit, men kommer även se över om det går att lösa de issues som tillhör de verktyg används. Efter dessa ändringar förväntar jag inte någon större skillnad på rapporten i sig förutom att det blir några mindre issues.</p>
    <p>Den andra förbättringen är att se över och skriva om min ApiController, där jag i ett första steg delar upp den i flera mindre controllers, eller ev flyttar över en route till en annan controller som behandlar liknande data. Förväntar mig efter förbättringen att det error som finns på min controller försvinner.</p>
    <p>Den tredje förbättringen är att skriva mer tester för att testa mer delar av koden. Detta gör jag för att först och främst få upp den totala kodtäckningen till en högre nivå, men också för att kunna förbättra CRAP-värden samt att få bort några av de varningar som gavs av PhpMetrics. Efter denna förbättring förväntar jag mig att de nya mätvärdena ger en högre kodtäckning, samt att flera varningar försvinner i tillägg till ett lägre CRAP-score.</p>
    <p>Kommer även att göra en fjärde förbättring där jag tänkt se över och skriva om de metoder som fick betyget B av scrutinizer. Det gör jag för att försöka få ett högre betyg och som tillsammans med de andra förbättringarna ska kunna höja betyget på kodkvaltén till en 10a.</p>
{% endblock %}
