{% extends "base.html.twig" %}

{% block title %}Redovisning{% endblock %}

{% block header %}Redovisningstexter{% endblock %}

{% block main %}
    <h2 id="kmom01">Kmom01</h2>
    <p>Första gången jag kom i kontakt med objektorienterad programmering var i kursen oopython som jag läste precis innan denna kursen. Man fick ju börja känna på objekt i slutet av javascript-kursen, och att det har varit ett bra upplägg i de kurserna fram till denna. Så det är mina tidigare erfarenheter till objektorientering, och därmed även mina förkunskaper som sträcker sig till det som vi har fått lära oss i de kurserna (framförallt oopython).</p>
    <p>För att skapa sina egna klasser bör man först få en förståelse för vad ett objekt är, att det har medlemsvariabler (properties) och metoder som kapslas in inuti objektet och kan ge objektet ett visst state (läge). Medlemsvariablerna och metoderna kan vara publika eller privata, vilket gör att man kan styra användares möjligheter till hur objektet kan användas. Man skapar ett objekt från en klass som kan ses som en mall/ritning över hur varje objekt skall fungera, och objektet ses som en instans av klassen. Syntaxmässigt använder man sig utav nyckelordet "class" följt av ett klassnamn och måsvingar { } för att skapa en klass, där man lägger medlemsvariablerna och metoderna inom måsvingarna. Och för att sedan skapa ett objekt från klassen tilldelar man en variabel en instans av klassen genom att använda sig utav nyckelordet “new” följt utav klassnamnet.</p>
    <p>Kodstrukturen för uppgiften och användandet av symfony kan jag ju endast jämföra med tidigare erfarenhet av liknande mvc-strukturer vi haft i andra kurser, där jag upplever kodbasen och strukturen i php lite mindre översiktligt. Jag upplever att i andra kodspråk blir det mycket tydligare, men det har nog mest att göra med hur syntaxen är, t ex i python eller javascript. Skulle jag inte haft den tidigare erfarenheten så hade jag nog tyckt att det varit mycket svårare att greppa helheten, men tack vare tidigare erfarenhet så tycker jag ändå att strukturen och kodbasen är lättare att förstå. Då det var en stund sedan vi hade php som grund i någon av kurserna, så tycker jag att syntaxen i koden är lite ovan men det är något man kommer in i snart igen.</p>
    <p>En av de stora saker jag tar med mig från artikeln “PHP the right way” är först hur mångsidigt PHP är som programmeringspråk, något som jag har förstått först nu när efter alla de kurser som man tagit under första läsåret. Många av delarna i artikeln är intressanta och vissa delar känns igen från tidigare kurser (speciellt oopython). Särskilt intressanta kapitel var bland annat “Dependency Injections”, där jag ser för mig att om man lär sig strukturera sin kod på ett genomtänkt sätt verkligen kan underlätta för framtida underhåll och uppgradering. En annan del som jag ser som värdefull är delen om “Internationalization and Localization” för framtida utveckling till flera språk, även om jag inte helt upplevde att jag greppade i artikeln hur man skall göra rent praktiskt. Men den mest intressanta och värdefulla delen var nog den om “Security”, då det är något som jag känner jag vill veta mer om då det verkligen är viktigt att hindra någon från att försöka förstöra det man skapat.</p>
    <p>Det var mycket ny information i detta kursmomentet, men det var nog framförallt i de olika artiklarna snarare än vad vi gjorde i övningen eller för uppgiften. Det som nog var kändes helt nytt var just det jag nämnde ovan med “Dependency injections” och hur man kan tänka för att skapa en mer lättunderhållen och inte en för  “inmålad” kodstruktur. Sedan om man har lärt sig det är kanske en annan sak, man har ju inte riktigt det fått prova det i praktiken ännu men det har i alla fall tagits upp på ett sätt jag inte känner igen från tidigare erfarenheter/kurser.</p>
    
    <h2 id="kmom02">Kmom02</h2>
    <p>När man programmerar objektorienterat kan man använda sig av konstruktioner som arv, komposition, interface och trait i php. Arv fungerar som så att om man skapar en klass, och vill sedan utöka den klassen med mer funktionalitet så utan att ändra det som man kan kalla för en basklass. Då passar det med arv som då som namnet antyder ärver alla medlemsvariabler och metoder från basklassen, som man sedan kan utöka i en subklass och även skriva över existerande metoder och variabler. Vill man även komma åt all funktionalitet som är i basklassen bör man även se till att medlemsvariabler och metoder i basklassen inte är satta som private utan istället som protected eller public så att man även når dem i subklassen.</p>
    <p>En komposition är relationen mellan två klasser, där man kan tänka i uttrycket “har-en” eller “has-a” för att mellan klasserna. Man pratar om två typer av komposition beroende på hur starka de är, där en komposition är den starkaste och en aggregation en svagare relation. T ex så har ett hus rum, men rummen kan inte existera utan ett hus och är då en komposition. Däremot så kan en postlåda tillhöra ett hus, men även om huset skulle försvinna så skulle postlådan finnas kvar och är i detta exempel en aggregation. En komposition är att föredra före arv, då detta kan skapa onödigt krångliga arvskonstruktioner.</p>
    <p>Ett interface är som en abstrakt mall för hur en klass ska se ut. Ett interface bestämmer på så sätt vad som ska finnas i en klass i form av metoder, men däremot inte hur de implementeras. T ex kan man i ett interface bestämma att en klass ska ha en metod getValue() som returnerar en integer, men exakt hur detta görs och vilket värde som returneras är upp till klassen som använder sig av interfacet.</p>
    <p>Ett trait kan man se som en bit kod som man vill återanvända i flera klasser där arv inte är ett alternativ, t ex att man önskar ärva av flera från flera olika basklasser som inte är möjligt i php. En klass använder sig (nycklord “use”) av en trait, som blir som att importera den funktionalitet som finns i en trait, som man då även kan återanvända till flera klasser.</p>
    <p>Uppgiften är jag överlag nöjd med hur jag har löst, jag skapade först en min Card-klass som jag jobbade med ihop med klassen DeckOfCards för att bygga upp grunden till hur allt skulle fungera ihop. Jag såg först till att ha all funktionalitet på plats på enklast möjliga sätt, för att därefter bygga vidare med de metoder jag implementerat och göra allt lite snyggare visuellt och även renare kodmässigt. I min DeckOfCards-klass så ser jag till att ha alla korten uppdelade i tre medlemsvariabler, där jag startar med alla korten i den ena variabeln men förflyttar de till de andra när man drar ett kort eller delar ut ett kort, på så sätt har man alltid tillgång till hela kortleken. Jag har använt mig utav “injection” för att göra DeckOfCards mer flexibel, men kan göras ännu mer flexibel om man skulle använda sig av ett interface. För att visa upp en sorterad kortlek så har jag en metod som sätter ihop de tre variablerna, och sedan returnerar en komplett sorterad kortlek så jag endast jobbar med en kortlek hela tiden men som samtidigt behåller sitt state av dragna eller utdelade kort.</p>
    <p>I mina controllers så har jag en POST init-route både för /card och /api routes:en, som endast kallar på vid behov. Jag har alltså en kontroll i de olika routes:en som kollar om en sessionvariabel är satt ('card_deck' eller 'card_deck_api'), och är den inte det så skickas man till init-routen och sedan tillbaka till den route man först försökte nå. Här satt jag fast en stund för att få detta att funka för min api-route då vi skulle använda POST, men lyckades tillslut när jag insåg man behövde använda forward() istället för redirectToRoute(). Har även testat att nå mina api:er via verktyget postman, och även det fungerar som tänkt. Med lite javascript har jag även fått dem att fungera på webbplatsen, speciellt för de två draw/:number och /deal/:players/:cards så de fungerar med ett formulär på ett smidigt sätt genom att uppdatera url-en som ska användas när man ändrar i formuläret.</p>
    <p>Som förbättringspotential ser jag att lägga till att en DeckOfCard tar ett interface istället för en Card-klass när man lägger till kort, vilket hade gjort den mer flexibel för andra typer av kortlekar. CardHand behöver utvecklas mer för ett faktiskt spel, och även hur CardHand och DeckOfCards interagerar med varandra när man spelar ett kortspel där en CardHand lämar tillbaka kort till DeckOfCards. En Player-class hade nog varit bra att ha, men tänkte jag låter det vara till nästa kursmoment samt en metod för att få ur JSON-data från klasser. Koden kan nog snyggas till och göras tydligare överlag, även med lite mer kommentarer för att förtydliga, men jag är rätt så nöjd med hur jag har löst uppgiften.</p>
    <p>Ang punkten “Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?” så förstår jag inte helt vad som menas, det känns som att detta är en kvarleva från en tidigare version.</p>
    <p>Mycket nytt som vanligt i detta kursmomentet, men det jag lärde mig mest utav var hur man kunde styra om en användare även när man skulle nå POST delar av sin webbplats. Som jag nämnt ovan satt jag länge med detta innan jag förstod hur man kunde göra, men det var lärorikt.<p>
    
    <h2 id="kmom03">Kmom03</h2>
    <p>Att försöka lösa det/de problem som uppgiften hade med flödesdiagram och psuedokod hade både sina för- och nackdelar. Flödesdiagramet tyckte jag hjälpte mig att få en bild av hur hela kortspelet skulle fungera i stora drag, vilket också hjälpte att få fram en tanke om hur koden kunde struktureras och även som en påminnelse när man väl hade börjat implementera själva spelet. Psuedokoden däremot tyckte jag var svårare att få till och den jag gjorde förklarar mer eller mindre också samma sak som flödesdiagrammet. Jag behöver bli bättre på att tänka igenom saker mer innan jag startar för det kan lätt bli lite lösningar längs vägen, men samtidigt har jag svårt att visualisera vad exakt som kan behövas och det blir lätt att jag låser mig i tankeprocessen istället för att komma igång. Att försöka skriva delar i psuedokod tyckte jag låste mig ännu mer och kände att i alla fall denna gången snarare bromsade mig mer än vad den hjälpte. Men när jag byggde vidare på spelet och skulle lägga till möjligheten att “splitta” en korthand, då var det mycket mer hjälpsamt att kunna tänka hur man skulle lösa det, men då hade jag ju också existerande kod att utgå ifrån.</p>
    <p>För att lösa uppgiften valde jag att göra blackjack istället för 21, och där ville jag fortsätta jobba med att injecta kort i en kortlek, mest för att få in vanan och se hur man kan göra snarare än att det egentligen kändes nödvändigt. Så bland de klasser jag skapade för uppgiften skapade jag även en DeckFactory för just detta ändamålet. De andra klasserna som jag sedan skapade kan man se på min <a href="{{ path('blackjack_doc') }}">/game/doc</a> sida, men jag försökte skapa klasser som hade sin egen roll/funktion där man sedan jobbade endast mot själva GameBlackjack-klassen i controllern för spelet. Andra klasser som används i spelet förutom kortleken skapas jag däremot i GameBlackjack då det blir en rätt så direkt koppling mellan t ex regler och spelet där såg jag ingen anledning till att göra det mer flexibelt med injections. I min RulesBlackjack-klass har jag några publika metoder, där en av dem returnerar en associative array med data som kan användas för vilka val som kan presenteras för spelaren. Tanken här var att jag först gjorde ett spel som uppfyllde kraven, men som sedan kunde byggas på med mer regler som används i blackjack (ex split och double-down) som jag såg för mig krävde lite mer tid, och som då bara kunde läggas till i arrayen och sedan jobbas vidare med utan att behöva ändra allt för mycket den andra koden. När jag sedan la till split kunde jag behålla mycket av koden som den var, men jag behövde ändra om i metoderna då en spelare nu kunde ha flera händer och en runda var inte bank mot spelare utan bankens hand mot alla spelarens händer t ex.</p>
    <p>Koden i sig är jag ok nöjd med skulle jag säga, det känns som jag kunde tänkt igenom upplägget mer och på så sätt eventuellt kunnat gjort en mer genomtänkt lösning. Tanken var ju att vi skulle hålla det enkelt, och det har jag ju ändå försökt att göra men det känns som det finns mycket enklare och kanske bättre sätt få en klass att göra samma sak som det jag har gjort. Jag valde ju att göra blackjack istället för 21 just för att det är lite andra regler som rimligtvis kräver lite mer kod och en lite större utmaning, så någonstans får man väl samtidigt tänka att “better done than perfect”. Koden växte mer direkt när det blev möjligt för en spelare att ha flera korthänder efter en split, vilket även gjorde spel-logiken annorlunda när varje runda kunde spelas mot 1 till 4 händer snarare än 1 mot 1. Som koden är vid inlämning är banken endast en korthands-klass och inte en spelar-klass, vilket behöver ändras om banken ska ha begränsat med pengar t ex, men har låtit detta var för nu då banken endast spelar med en hand och mycket utav funktionalitet i spelar-klassen är för att kunna hålla flera händer. Sen kan koden nog städas upp mer i allmänhet och få lite mer kommentarer för att förtydliga hur den fungerar.</p>
    <p>Så långt in i kursen tycker jag det har känts rätt bra att jobba med symfony då jag tycker att tack vare övningarna förstått hur man kan använda sig av det utan att det känns krånligt på något sätt. Det största hindret i starten av kursen var snarare att uppdatera kunskapen för syntaxen i php snarare än att förstå ramverket, så det är absolut en positiv känsla för symfony. En sak som jag tyckte var speciellt bra under detta kursmomentet som kanske inte nödvändigtvis har direkt med symfony att göra, var att vi fick tydlig info om var man ska placera sin kod. I förra det kursmomentet så var jag nöjd med hur jag löst uppgiften, men hur koden var skriven och placerad kändes varken helt bra eller speciellt “snyggt”. Så det första jag gjorde var att städa upp förra kursmomentets controller så att det blev lite renare och tydligare.</p>
    <p>Som vanligt i alla kursmoment är det mycket nytt, men det som stack ut denna gången och gav mig var det som jag nämnde ovan om hur man kan/ska tänka när man placerar ut sin kod och vart den ska vara. Jag har tidigare tänkt lite mer att det är "onödigt" att ha så mer klasser än nödvändigt, men efter detta kursmomentet blev det tydligt att det blir ju faktiskt mycket tydligare och “snyggare” om man har mer klasser som har sina uppgifter, vilket underlättar mycket att hålla nere koden man har i en controller utöver att skapa en tydligare struktur i sin kod.</p>
    
    <h2 id="kmom04">Kmom04</h2>
    <p>Här kommer redovisningstexten för kursmoment 4.</p>
    <h2 id="kmom05">Kmom05</h2>
    <p>Här kommer redovisningstexten för kursmoment 5.</p>
    <h2 id="kmom06">Kmom06</h2>
    <p>Här kommer redovisningstexten för kursmoment 6.</p>
    <h2 id="kmom07-10">Kmom07/10</h2>
    <p>Här kommer redovisningstexten för kursmoment 7/10.</p>
{% endblock %}
