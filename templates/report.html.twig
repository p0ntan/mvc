{% extends "base.html.twig" %}

{% block title %}Redovisning{% endblock %}

{% block header %}Redovisningstexter{% endblock %}

{% block main %}
    <h2 id="kmom01">Kmom01</h2>
    <p>Första gången jag kom i kontakt med objektorienterad programmering var i kursen oopython som jag läste precis innan denna kursen. Man fick ju börja känna på objekt i slutet av javascript-kursen, och att det har varit ett bra upplägg i de kurserna fram till denna. Så det är mina tidigare erfarenheter till objektorientering, och därmed även mina förkunskaper som sträcker sig till det som vi har fått lära oss i de kurserna (framförallt oopython).</p>
    <p>För att skapa sina egna klasser bör man först få en förståelse för vad ett objekt är, att det har medlemsvariabler (properties) och metoder som kapslas in inuti objektet och kan ge objektet ett visst state (läge). Medlemsvariablerna och metoderna kan vara publika eller privata, vilket gör att man kan styra användares möjligheter till hur objektet kan användas. Man skapar ett objekt från en klass som kan ses som en mall/ritning över hur varje objekt skall fungera, och objektet ses som en instans av klassen. Syntaxmässigt använder man sig utav nyckelordet "class" följt av ett klassnamn och måsvingar { } för att skapa en klass, där man lägger medlemsvariablerna och metoderna inom måsvingarna. Och för att sedan skapa ett objekt från klassen tilldelar man en variabel en instans av klassen genom att använda sig utav nyckelordet “new” följt utav klassnamnet.</p>
    <p>Kodstrukturen för uppgiften och användandet av symfony kan jag ju endast jämföra med tidigare erfarenhet av liknande mvc-strukturer vi haft i andra kurser, där jag upplever kodbasen och strukturen i php lite mindre översiktligt. Jag upplever att i andra kodspråk blir det mycket tydligare, men det har nog mest att göra med hur syntaxen är, t ex i python eller javascript. Skulle jag inte haft den tidigare erfarenheten så hade jag nog tyckt att det varit mycket svårare att greppa helheten, men tack vare tidigare erfarenhet så tycker jag ändå att strukturen och kodbasen är lättare att förstå. Då det var en stund sedan vi hade php som grund i någon av kurserna, så tycker jag att syntaxen i koden är lite ovan men det är något man kommer in i snart igen.</p>
    <p>En av de stora saker jag tar med mig från artikeln “PHP the right way” är först hur mångsidigt PHP är som programmeringspråk, något som jag har förstått först nu när efter alla de kurser som man tagit under första läsåret. Många av delarna i artikeln är intressanta och vissa delar känns igen från tidigare kurser (speciellt oopython). Särskilt intressanta kapitel var bland annat “Dependency Injections”, där jag ser för mig att om man lär sig strukturera sin kod på ett genomtänkt sätt verkligen kan underlätta för framtida underhåll och uppgradering. En annan del som jag ser som värdefull är delen om “Internationalization and Localization” för framtida utveckling till flera språk, även om jag inte helt upplevde att jag greppade i artikeln hur man skall göra rent praktiskt. Men den mest intressanta och värdefulla delen var nog den om “Security”, då det är något som jag känner jag vill veta mer om då det verkligen är viktigt att hindra någon från att försöka förstöra det man skapat.</p>
    <p>Det var mycket ny information i detta kursmomentet, men det var nog framförallt i de olika artiklarna snarare än vad vi gjorde i övningen eller för uppgiften. Det som nog var kändes helt nytt var just det jag nämnde ovan med “Dependency injections” och hur man kan tänka för att skapa en mer lättunderhållen och inte en för  “inmålad” kodstruktur. Sedan om man har lärt sig det är kanske en annan sak, man har ju inte riktigt det fått prova det i praktiken ännu men det har i alla fall tagits upp på ett sätt jag inte känner igen från tidigare erfarenheter/kurser.</p>
    
    <h2 id="kmom02">Kmom02</h2>
    <p>När man programmerar objektorienterat kan man använda sig av konstruktioner som arv, komposition, interface och trait i php. Arv fungerar som så att om man skapar en klass, och vill sedan utöka den klassen med mer funktionalitet så utan att ändra det som man kan kalla för en basklass. Då passar det med arv som då som namnet antyder ärver alla medlemsvariabler och metoder från basklassen, som man sedan kan utöka i en subklass och även skriva över existerande metoder och variabler. Vill man även komma åt all funktionalitet som är i basklassen bör man även se till att medlemsvariabler och metoder i basklassen inte är satta som private utan istället som protected eller public så att man även når dem i subklassen.</p>
    <p>En komposition är relationen mellan två klasser, där man kan tänka i uttrycket “har-en” eller “has-a” mellan klasserna. Man pratar om två typer av komposition beroende på hur stark relationen är, där en komposition är den starkaste och en aggregation en svagare relation. T ex så har ett hus rum, men rummen kan inte existera utan ett hus och är då en komposition. Däremot så kan en postlåda tillhöra ett hus, men även om huset skulle försvinna så skulle postlådan finnas kvar och är i detta exempel en aggregation. En komposition är att föredra före arv, då detta kan skapa onödigt krångliga arvskonstruktioner.</p>
    <p>Ett interface är som en abstrakt mall för hur en klass ska se ut. Ett interface bestämmer på så sätt vad som ska finnas i en klass i form av metoder, men däremot inte hur de implementeras. T ex kan man i ett interface bestämma att en klass ska ha en metod getValue() som returnerar en integer, men exakt hur detta görs och vilket värde som returneras är upp till klassen som använder sig av interfacet.</p>
    <p>Ett trait kan man se som en bit kod som man vill återanvända i flera klasser där arv inte är ett alternativ, t ex att man önskar ärva från flera olika basklasser som inte är möjligt i php. En klass använder sig (nyckelord “use”) av en trait, som blir som att importera den funktionalitet som finns i en trait, som man då även kan återanvända till flera klasser.</p>
    <p>Uppgiften är jag överlag nöjd med hur jag har löst, jag skapade först en min Card-klass som jag jobbade med ihop med klassen DeckOfCards för att bygga upp grunden till hur allt skulle fungera ihop. Jag såg först till att ha all funktionalitet på plats på enklast möjliga sätt, för att därefter bygga vidare med de metoder jag implementerat och göra allt lite snyggare visuellt och även renare kodmässigt. I min DeckOfCards-klass så ser jag till att ha alla korten uppdelade i två medlemsvariabler, där jag startar med alla korten i den ena variabeln men förflyttar de till den andra när man drar ett kort, på så sätt har man alltid tillgång till hela kortleken. Jag har använt mig utav “injection” för att göra DeckOfCards mer flexibel, men kan göras ännu mer flexibel om man skulle använda sig av ett interface. För att visa upp en sorterad kortlek så har jag en metod som sätter ihop de två variablerna, och sedan returnerar en komplett sorterad kortlek så jag endast jobbar med en kortlek hela tiden men som samtidigt behåller sitt state av dragna kort.</p>
    <p>I mina controllers så har jag en init-route både för /card och /api routes:en, som endast kallar på vid behov. Jag har alltså en kontroll i de olika routes:en som kollar om en sessionvariabel är satt, och är den inte det så skickas man till init-routen och sedan tillbaka till den route man först försökte nå. Här satt jag fast en stund för att få detta att funka för min api-route då vi skulle använda POST, men lyckades tillslut när jag insåg man behövde använda forward() istället för redirectToRoute(). Har även testat att nå mina api:er via verktyget postman, och även det fungerar som tänkt. Med lite javascript har jag även fått dem att fungera på webbplatsen, speciellt för de två draw/:number så de fungerar med ett formulär på ett smidigt sätt genom att uppdatera url-en som ska användas när man ändrar i formuläret.</p>
    <p>Som förbättringspotential ser jag att lägga till att en DeckOfCard tar ett interface istället för en Card-klass när man lägger till kort, vilket hade gjort den mer flexibel för andra typer av kortlekar. Koden kan nog snyggas till och göras tydligare överlag, även med lite mer kommentarer för att förtydliga, men jag är rätt så nöjd med hur jag har löst uppgiften.</p>
    <p>Ang punkten “Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?” så förstår jag inte helt vad som menas, det känns som att detta är en kvarleva från en tidigare version.</p>
    <p>Mycket nytt som vanligt i detta kursmomentet, men det jag lärde mig mest utav var hur man kunde styra om en användare även när man skulle nå POST delar av sin webbplats. Som jag nämnt ovan satt jag länge med detta innan jag förstod hur man kunde göra, men det var lärorikt.<p>

    <h2 id="kmom03">Kmom03</h2>
    <p>Här kommer redovisningstexten för kursmoment 3.</p>
    <h2 id="kmom04">Kmom04</h2>
    <p>Här kommer redovisningstexten för kursmoment 4.</p>
    <h2 id="kmom05">Kmom05</h2>
    <p>Här kommer redovisningstexten för kursmoment 5.</p>
    <h2 id="kmom06">Kmom06</h2>
    <p>Här kommer redovisningstexten för kursmoment 6.</p>
    <h2 id="kmom07-10">Kmom07/10</h2>
    <p>Här kommer redovisningstexten för kursmoment 7/10.</p>
{% endblock %}
